- name: "Installing"
  block:

    - name: "Add Debian repository"
      apt_repository:
        repo: deb http://ftp.ru.debian.org/debian/ {{ ansible_facts['lsb']['codename'] }} main contrib
        state: present
      when: add_system_repo == "yes"

    - name: "Install gnupg package"
      apt:
        name: "gnupg"

    - name: "Add signing key for Mongo repository"
      apt_key:
        url: "https://www.mongodb.org/static/pgp/server-{{ mongodb.version }}.asc"
        state: present

    - name: "Add MongoDB repository"
      apt_repository:
        repo: deb http://repo.mongodb.org/apt/debian {{ ansible_facts['lsb']['codename'] }}/mongodb-org/{{ mongodb.version }} main
        state: present
        filename: mongodb-org-{{ mongodb.version }}

    - name: "Install the latest version of MongoDB"
      apt:
        pkg:
          - mongodb-org-server
          - mongodb-org-shell

    - name: "Creates directory {{ mongodb.path | default('/data/db') }} for MongoDB"
      file:
        path: "{{ mongodb.path | default('/data/db') }}"
        state: directory
        mode: 0755
        group: mongodb
        owner: mongodb

    - name: "Create directory '/var/run/mongodb' for MongoDB"
      file:
        path: "/var/run/mongodb"
        state: directory
        mode: 0755
        group: mongodb
        owner: mongodb

    - name: "Create MongoDB config"
      template:
        src: templates/mongod.conf.j2
        dest: /etc/mongod.conf

    - name: "Deploying MongoDB config for recreate /var/run/mongodb on tmpfs"
      template:
        src: templates/mongodb.conf.tmpfs.j2
        dest: /usr/lib/tmpfiles.d/mongodb.conf

    - name: "Start service MongoDB"
      systemd:
        name: mongod
        daemon_reload: yes
        enabled: yes
        state: restarted

    - name: "Wait for MongoDB service starts"
      wait_for:
        host: 127.0.0.1
        port: "{{ mongodb.port }}"
        delay: 1
        timeout: 15

    - name: "Flush hostmap"
      shell: mongo --host "{{ mongodb.address | default(address | default('127.0.0.1')) }}" "{{ mongodb.db | default(address | default('sip3')) }}" --port {{ mongodb.port | default('27017') }} --eval 'db.hosts.drop()'

    - name: "Insert hostmap into MongoDB"
      shell: mongo --host "{{ mongodb.address | default(address | default('127.0.0.1')) }}" "{{ mongodb.db | default(address | default('sip3')) }}" --port {{ mongodb.port | default('27017') }} --eval 'db.hosts.insert({{ item | to_json(ensure_ascii=False)}})'
      loop: "{{ hostmap }}"

    - name: "Create index for hostmap"
      shell: "mongo --host \"{{ mongodb.address | default(address | default('127.0.0.1')) }}\" \"{{ mongodb.db | default(address | default('sip3')) }}\" --port {{ mongodb.port | default('27017') }} --eval 'db.hosts.createIndex({ name: 1 })'"
  when: state == "started"

- name: "Uninstalling"
  block:
    - name: "Stop MongoDB"
      systemd:
        name: mongod
        state: stopped
        enabled: no

    - name: "Uninstall MongoDB"
      apt:
        pkg:
          - mongodb-org-server
          - mongodb-org-shell
        autoremove: yes
        state: absent

    - name: "Purge project files"
      block:
        - name: "Collecting project files"
          stat:
            path: "{{item}}"
          register: folder_stats
          with_items:
            - "/etc/mongod.conf"
            - "{{ mongodb.path | default('/data/db') }}/"
            - "/var/log/mongodb"
            - "/etc/yum.repos.d/mongodb-org-{{ mongodb.version }}.repo"
        - name: "Delete project files"
          file:
            path: "{{ item.item }}"
            force: true
            state: absent
          when: item.stat.exists == true and item.stat.isdir == false
          with_items:
            - "{{folder_stats.results}}"
        - name: "Delete project folders"
          file:
            path: "{{ item.item }}"
            force: true
            state: absent
          when: item.stat.exists == true and item.stat.isdir == true
          with_items:
            - "{{folder_stats.results}}"
      ignore_errors: yes
  when: state == "absent"
